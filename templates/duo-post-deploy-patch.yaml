# ============================= #
# !!! Do NOT edit this file !!! #
# ============================= #
# Instead edit templates/src/duo-post-deploy-patch.yaml and run 'import-files.py' again
AWSTemplateFormatVersion: 2010-09-09
Description: >
  Configure outbound UDP security group rules required for AWS Quickstart Duo MFA

Parameters:
  DirectoryServiceSecurityGroupId:
    Type: String
    AllowedPattern: ^sg\-[\dA-Za-z]{8,}$
    Description: >
      Security group ID of Directory Service controllers
  RadiusSecurityGroupID:
    Type: String
    AllowedPattern: ^sg\-[\dA-Za-z]{8,}$
    Description: >
      Security group ID of RADIUS servers

Resources: 
  #--------------------------------------------------
  # IAM Role to execute Lambda that adds
  # Directory Service security group outbound rule
  #--------------------------------------------------
  DSSecurityGroupAddUDPEgressRuleRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub DSSecurityGroupAddUDPEgressRuleRole-${DirectoryServiceSecurityGroupId}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AddDirectoryServiceSecurityGroupEgress
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupEgress
                # Can I do this? Is this how works?
                # Is the sg's ARN available on the GetDirSvcDetails?
                # From which vars can I get Region and Acct Id?
                Resource: !Sub "arn:aws:ec2:::security-group/${DirectoryServiceSecurityGroupId}"

  #-------------------------------------------------
  # Function to set outbound rule on DS's DNS s/g
  # allowing UDP traffic on port 1812
  #-------------------------------------------------
  AddUDPEgressRuleFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SetDS-DNSUDPEgressRule
      Description: |
        Sets rule on security group for Directory Service's DNS servers
        allowing outbound UDP traffic on port 1812 to security group of
        RADIUS instances
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !Sub DSSecurityGroupAddUDPEgressRuleRole-${DirectoryServiceSecurityGroupId}
      Runtime: python3.6
      Timeout: 180
      Tags:
        - Key: duo:DirectoryServiceSecurityGroupId
          Value: !Ref DirectoryServiceSecurityGroupId
      Code:
        ZipFile: | # TODO: This is copy-pasted here. I need a better solution.
          import json
          import boto3
          from botocore.vendored import requests
          from botocore.exceptions import ClientError

          def construct_rule(*,
              acct_id: str,
              target_security_group_id
          ) -> dict:
              return {
                  'FromPort': 1812,
                  'ToPort': 1812,
                  'UserIdGroupPairs': [{
                      'GroupId': target_security_group_id,
                      'UserId': acct_id
                  }],
                  'IpProtocol': 'udp'
              }

          def get_error_message_for_boto_exception(e, ignore_code='') -> str:
              if (not isinstance(e, ClientError)
              or e.response['Error']['Code'] != ignore_code):
                  return str(e)
              else: return ''

          def lambda_handler(event, context) -> None:
              """ If event is "Create", add new s/g egress rule
                  If event is "Delete", remove existing rule
              """
              security_group_id = event['ResourceProperties']['ds_security_group_id']
              acct_id = event['ResourceProperties']['acct_id']
              radius_security_group_id = event['ResourceProperties']['radius_security_group_id']
              rule = construct_rule(
                  acct_id=acct_id,
                  target_security_group_id=radius_security_group_id
              )

              ec2 = boto3.client('ec2')

              SUCCESS = 'SUCCESS'
              FAILED = 'FAILED'

              response_body = { 'Status': FAILED }
              response_body['Reason'] = ''

              if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                  try:
                      ec2.authorize_security_group_egress(
                          GroupId=security_group_id,
                          IpPermissions=[ rule ]
                      )
                  except Exception as e:
                      # If rule-to-delete not found, that's ok. Move on
                      # for anything else, send exceptions tring as response
                      response_body['Reason'] = get_error_message_for_boto_exception(
                          e,
                          ignore_code='InvalidPermission.Duplicate'
                      )

              elif event['RequestType'] == 'Delete':
                  try:
                      ec2.revoke_security_group_egress(
                          GroupId=security_group_id,
                          IpPermissions= [ rule ]
                      )
                  except Exception as e:
                      # If rule-to-delete not found, that's ok. Move on
                      # for anything else, send exceptions tring as response
                      response_body['Reason'] = get_error_message_for_boto_exception(
                          e,
                          ignore_code='InvalidPermission.NotFound'
                      )

              else:
                  response_body['Reason'] = f'Unknown RequestType {event["RequestType"]}. Valid RequestTypes are "Create", "Update", "Delete".'


              if response_body['Reason'] == '':
                  response_body['Status'] = SUCCESS
                  response_body.pop('Reason')

              requests.put(event['ResponseURL'], data=json.dumps(response_body))

  #-------------------------------------------------
  # Custom resource to invoke function to add rule
  # to AD controllers security group
  # allowing outbound UDP on port 1812
  #-------------------------------------------------
  AddUDPEgressRule:
    Type: Custom::AddUDPEgressRule
    Properties:
      ServiceToken: !GetAtt AddUDPEgressRuleFunction.Arn
      ds_security_group_id: !Ref DirectoryServiceSecurityGroupId
      radius_security_group_id: !Ref RadiusSecurityGroupID
      acct_id: !Ref AWS::AccountId

  #-------------------------------------------------
  # Custom resource to invoke function to add rule
  # to AD controllers security group
  # allowing outbound UDP on port 1812
  #-------------------------------------------------

